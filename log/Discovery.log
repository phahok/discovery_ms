1                                                          The SAS System                          15:15 Thursday, November 23, 2023

NOTE: Copyright (c) 2023 by SAS Institute Inc., Cary, NC, USA. 
NOTE: SAS (r) Proprietary Software 9.4 (TS1M8) 
      Licensed to DemoCenter - VAVS7.5AnalyticsProd - 23W05 - 2Tier, Site 70068118.
NOTE: This session is executing on the Linux 3.10.0-1160.88.1.el7.x86_64 (LIN X64) platform.



NOTE: Analytical products:
      
      SAS/STAT 15.3
      SAS/ETS 15.3
      SAS/OR 15.3
      SAS/IML 15.3
      SAS/QC 15.3

NOTE: Additional host information:

 Linux LIN X64 3.10.0-1160.88.1.el7.x86_64 #1 SMP Tue Mar 7 15:41:52 UTC 2023 x86_64 CentOS Linux release 7.9.2009 (Core) 

You are running SAS 9. Some SAS 8 files will be automatically converted 
by the V9 engine; others are incompatible.  Please see 
http://support.sas.com/rnd/migration/planning/platform/64bit.html

PROC MIGRATE will preserve current SAS file attributes and is 
recommended for converting all your SAS libraries from any 
SAS 8 release to SAS 9.  For details and examples, please see
http://support.sas.com/rnd/migration/index.html


This message is contained in the SAS news file, and is presented upon
initialization.  Edit the file "news" in the "misc/base" directory to
display site-specific news and information in the program log.
The command line option "-nonews" will prevent this display.




NOTE: SAS initialization used:
      real time           0.02 seconds
      cpu time            0.02 seconds
      
1          options symbolgen mprint mlogic;
2          filename rwiOut ".";
3          ods html close;
4          options nodate nonumber;
5          title;
6          ods escapechar="\~";
7          footnote "\~\{style \[font_size=10pt just=right color=cxffffff\] Provided to you by SAS 9.4 and ODS Absolute Layout
7        ! features.\}";
8          proc template;
9          define style Styles.Orionbackground;
10         parent=Styles.Printer;
11         style body \/
                      _
                      22
                      76
ERROR 22-322: Syntax error, expecting one of the following: a quoted string, ;, ',', /, FROM.  
ERROR 76-322: Syntax error, statement will be ignored.
                                                           The SAS System

12         background=#87CEFA;
13         end;
WARNING: Object will not be saved.
14         run;
NOTE: PROCEDURE TEMPLATE used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      
WARNING: Errors were produced.
NOTE: The SAS System stopped processing this step because of errors.
15         ods pdf file="Discovery_teste.pdf" style=Styles.Orionbackground notoc;
NOTE: Writing ODS PDF output to DISK destination "/tmp/discovery_ms/Discovery_teste.pdf", printer "PDF".


16         data _null_ ;
17         dcl odsout trt();
18         trt.layout_absolute();
19         trt.region(y: '2in');
20         trt.format_text(data: 'Discovery', just: 'c',
21         style_attr: 'color=cxffffff just=center font_size=72pt');
22         trt.region(y: '3in', x: '3in');
23         trt.format_text(data: 'Managed Services',
24         style_attr:'color=cxffffff font_size=28pt');
25         trt.region(y: '5in');
26         trt.format_text(data: 'SASSERVER.DEMO.SAS.COM',
27         just: 'c',
28         style_attr:'font_size=36pt color=cxffffff');
29         trt.region(y: '7in');
30         trt.format_text(data: '23112023_1515',
31         just: c,
32         style_attr:'font_size=20pt color=cxffffff');
33         trt.layout_end();
34         run;

NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.02 seconds
      

35         ods pdf style=listing;
36         %include "/tmp/discovery_ms/ProgramaSAS/tab_infoServidor.sas";

NOTE: The data set WORK.INFOCPU has 5 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: There were 5 observations read from the data set WORK.INFOCPU.
NOTE: The PROCEDURE PRINT printed page 1.

52         %include "/tmp/discovery_ms/ProgramaSAS/tab_infoCPU.sas";

                                                           The SAS System

NOTE: The data set WORK.INFOCPU has 4 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: There were 4 observations read from the data set WORK.INFOCPU.
NOTE: The PROCEDURE PRINT printed page 2.

67         %include "/tmp/discovery_ms/ProgramaSAS/tab_infoMEM.sas";

NOTE: The data set WORK.INFOMEMORIA has 2 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      
NOTE: There were 2 observations read from the data set WORK.INFOMEMORIA.
NOTE: The PROCEDURE PRINT printed page 3.

80         %include "/tmp/discovery_ms/ProgramaSAS/tab_infoRede.sas";

NOTE: The data set WORK.INFOREDE has 11 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      
NOTE: There were 11 observations read from the data set WORK.INFOREDE.
NOTE: The PROCEDURE PRINT printed page 4.

102        %include "/tmp/discovery_ms/ProgramaSAS/tab_infoDisco.sas";

NOTE: The data set WORK.INFODISCO has 8 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
                                                           The SAS System

      
NOTE: There were 8 observations read from the data set WORK.INFODISCO.
NOTE: The PROCEDURE PRINT printed page 5.

121        %include "/tmp/discovery_ms/ProgramaSAS/sasinstallreport.sas";
MLOGIC(SASINSTALLREPORTER):  Beginning execution.
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
MLOGIC(SASINSTALLREPORTER):  %IF condition %index(CMOSVM,%substr(&SYSSCP,1,2)*) is FALSE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SLSH)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is XCMD)
MPRINT(SASINSTALLREPORTER):   options formdlim='-' nosyntaxcheck nostimer;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSSCP = WIN is FALSE
MPRINT(SASINSTALLREPORTER):   ** get location of SAS installation: **;
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASROOT)
MPRINT(SASINSTALLREPORTER):   ** get SASHOME level for applications and such **;
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASROOT resolves to /opt/sasinside/SASHome/SASFoundation/9.4
MLOGIC(SASINSTALLREPORTER):  %DO %UNTIL(("&SYSVLONG" < "9.02") or (%sysfunc(fileexist(&sashome.&slsh.deploymntreg)))) loop 
      beginning.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome/SASFoundation/9.4
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is UPONE)
SYMBOLGEN:  Macro variable SASHOME resolves to 4.9/noitadnuoFSAS/emoHSAS/edisnisas/tpo/
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASHOME resolves to 4.9/noitadnuoFSAS/emoHSAS/edisnisas/tpo/
SYMBOLGEN:  Macro variable UPONE resolves to 4
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASHOME resolves to noitadnuoFSAS/emoHSAS/edisnisas/tpo/
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome/SASFoundation
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(SASINSTALLREPORTER):  %DO %UNTIL(("&SYSVLONG" < "9.02") or (%sysfunc(fileexist(&sashome.&slsh.deploymntreg)))) condition is 
      FALSE; loop will iterate again.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome/SASFoundation
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is UPONE)
SYMBOLGEN:  Macro variable SASHOME resolves to noitadnuoFSAS/emoHSAS/edisnisas/tpo/
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASHOME resolves to noitadnuoFSAS/emoHSAS/edisnisas/tpo/
SYMBOLGEN:  Macro variable UPONE resolves to 14
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASHOME)
SYMBOLGEN:  Macro variable SASHOME resolves to emoHSAS/edisnisas/tpo/
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(SASINSTALLREPORTER):  %DO %UNTIL() condition is TRUE; loop will not iterate again.
MPRINT(SASINSTALLREPORTER):   ** get machine name: **;
MLOGIC(SASINSTALLREPORTER):  %GLOBAL  SYSHOSTNAME
SYMBOLGEN:  Macro variable SYSHOSTNAME resolves to sasserver
MLOGIC(SASINSTALLREPORTER):  %IF condition "&syshostname " ^= " " is TRUE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is MACHINE)
                                                           The SAS System

SYMBOLGEN:  Macro variable SYSHOSTNAME resolves to sasserver
SYMBOLGEN:  Macro variable SYSVER resolves to 9.4
SYMBOLGEN:  Macro variable SYSPROCESSNAME resolves to Program /tmp/discovery_ms/ProgramaSAS/Discovery.sas
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSVER >= 9.3 and %substr(&SYSPROCESSNAME,1,3) = DMS is FALSE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is METAPASS)
WARNING: The argument to macro function %SYSGET is not defined as a system variable.
SYMBOLGEN:  Macro variable METAPASS resolves to 
MLOGIC(SASINSTALLREPORTER):  %IF condition "&METAPASS. " ^= " " is FALSE
MPRINT(SASINSTALLREPORTER):   ***********************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code determines what is licensed by parsing the output from *;
MPRINT(SASINSTALLREPORTER):   * PROC SETINIT. It then also creates a $license format that can be *;
MPRINT(SASINSTALLREPORTER):   * used in printing the custom product versions and other steps. *;
MPRINT(SASINSTALLREPORTER):   ***********************************************************************;
MPRINT(SASINSTALLREPORTER):   filename license temp;
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LICENSE)
SYMBOLGEN:  Macro variable LICENSE resolves to /tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030
MPRINT(SASINSTALLREPORTER):   proc setinit outfile="/tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030";
MPRINT(SASINSTALLREPORTER):   run;

Original site validation data
Current version: 9.04.01M8P011823
Site name:    'DemoCenter - VAVS7.5AnalyticsProd - 23W05 - 2Tier'.
Site number:  70068118.
CPU A: Model name='' model number='' serial=''.
Expiration:   06MAR2024.
Grace Period:  45 days (ending 20APR2024).
Warning Period: 45 days (ending 04JUN2024).
System birthday:   28FEB2023.
Operating System:   LIN X64 .
Product expiration dates:
---Base SAS Software                                                                                    06MAR2024 (CPU A) 
---SAS/STAT                                                                                             06MAR2024 (CPU A) 
---SAS/GRAPH                                                                                            06MAR2024 (CPU A) 
---SAS/ETS                                                                                              06MAR2024 (CPU A) 
---SAS/FSP                                                                                              06MAR2024 (CPU A) 
---SAS/OR                                                                                               06MAR2024 (CPU A) 
---SAS/AF                                                                                               06MAR2024 (CPU A) 
---SAS/IML                                                                                              06MAR2024 (CPU A) 
---SAS/QC                                                                                               06MAR2024 (CPU A) 
---SAS/ASSIST                                                                                           06MAR2024 (CPU A) 
---SAS/CONNECT                                                                                          06MAR2024 (CPU A) 
---SAS/EIS                                                                                              06MAR2024 (CPU A) 
---SAS/GIS                                                                                              06MAR2024 (CPU A) 
---SAS OLAP Server                                                                                      06MAR2024 (CPU A) 
---SAS Enterprise Miner                                                                                 06MAR2024 (CPU A) 
---MDDB Server common products                                                                          06MAR2024 (CPU A) 
---SAS Integration Technologies                                                                         06MAR2024 (CPU A) 
---SAS/Secure 168-bit                                                                                   06MAR2024 (CPU A) 
---SAS Enterprise Miner Server                                                                          06MAR2024 (CPU A) 
---SAS Enterprise Miner Client                                                                          06MAR2024 (CPU A) 
---SAS Text Miner                                                                                       06MAR2024 (CPU A) 
---Unused OLAP Slot                                                                                     06MAR2024 (CPU A) 
---Available for conditional setinit                                                                    06MAR2024 (CPU A) 
---SAS High-Performance Forecasting                                                                     06MAR2024 (CPU A) 
---SAS Enterprise Guide                                                                                 06MAR2024 (CPU A) 
---SAS Bridge for ESRI                                                                                  06MAR2024 (CPU A) 
---Forecast Server Conditional Setinit                                                                  06MAR2024 (CPU A) 
---OR OPT                                                                                               06MAR2024 (CPU A) 
                                                           The SAS System

---OR PRS                                                                                               06MAR2024 (CPU A) 
---OR IVS                                                                                               06MAR2024 (CPU A) 
---OR LSO                                                                                               06MAR2024 (CPU A) 
---SAS/ACCESS Interface to DB2                                                                          06MAR2024 (CPU A) 
---SAS/ACCESS Interface to Oracle                                                                       06MAR2024 (CPU A) 
---SAS/ACCESS Interface to SAP ASE                                                                      06MAR2024 (CPU A) 
---SAS/ACCESS Interface to PC Files                                                                     06MAR2024 (CPU A) 
---SAS/ACCESS Interface to ODBC                                                                         06MAR2024 (CPU A) 
---SAS/ACCESS Interface to INFORMIX                                                                     06MAR2024 (CPU A) 
---SAS/ACCESS Interface to R/3                                                                          06MAR2024 (CPU A) 
---SAS/ACCESS Interface to Teradata                                                                     06MAR2024 (CPU A) 
---SAS/ACCESS Interface to Microsoft SQL Server                                                         06MAR2024 (CPU A) 
---SAS/ACCESS Interface to MySQL                                                                        06MAR2024 (CPU A) 
---Text Miner for Danish                                                                                06MAR2024 (CPU A) 
---Text Miner for Dutch                                                                                 06MAR2024 (CPU A) 
---Text Miner for Finnish                                                                               06MAR2024 (CPU A) 
---Text Miner for French                                                                                06MAR2024 (CPU A) 
---Text Miner for German                                                                                06MAR2024 (CPU A) 
---Text Miner for Italian                                                                               06MAR2024 (CPU A) 
---Text Miner for Portuguese                                                                            06MAR2024 (CPU A) 
---Text Miner for Spanish                                                                               06MAR2024 (CPU A) 
---Text Miner for Swedish                                                                               06MAR2024 (CPU A) 
---Text Miner for Polish                                                                                06MAR2024 (CPU A) 
---Text Miner for Japanese                                                                              06MAR2024 (CPU A) 
---Text Miner for Arabic                                                                                06MAR2024 (CPU A) 
---Text Miner for Russian                                                                               06MAR2024 (CPU A) 
---Text Miner for Korean                                                                                06MAR2024 (CPU A) 
---SAS Forecast Studio                                                                                  06MAR2024 (CPU A) 
---SAS Forecast Server Mid-Tier                                                                         06MAR2024 (CPU A) 
---Text Miner for Croatian                                                                              06MAR2024 (CPU A) 
---Text Miner for Norwegian                                                                             06MAR2024 (CPU A) 
---Text Miner for Slovak                                                                                06MAR2024 (CPU A) 
---Text Miner for Slovenian                                                                             06MAR2024 (CPU A) 
---Text Miner for Czech                                                                                 06MAR2024 (CPU A) 
---Text Miner for Greek                                                                                 06MAR2024 (CPU A) 
---Text Miner for Hebrew                                                                                06MAR2024 (CPU A) 
---Text Miner for Hungarian                                                                             06MAR2024 (CPU A) 
---Text Miner for Romanian                                                                              06MAR2024 (CPU A) 
---Text Miner for Thai                                                                                  06MAR2024 (CPU A) 
---Text Miner for Turkish                                                                               06MAR2024 (CPU A) 
---Text Miner for Chinese                                                                               06MAR2024 (CPU A) 
---Text Miner for Indonesian                                                                            06MAR2024 (CPU A) 
---Text Miner for Vietnamese                                                                            06MAR2024 (CPU A) 
---Text Analytics for Farsi                                                                             06MAR2024 (CPU A) 
---Text Analytics for Hindi                                                                             06MAR2024 (CPU A) 
---SAS Metadata Bridges for General Industry Standards                                                  06MAR2024 (CPU A) 
---SAS Model Manager                                                                                    06MAR2024 (CPU A) 
---SAS/IML Studio                                                                                       06MAR2024 (CPU A) 
---SAS Workspace Server for Local Access                                                                06MAR2024 (CPU A) 
---SAS Workspace Server for Enterprise Access                                                           06MAR2024 (CPU A) 
---SAS/ACCESS Interface to Netezza                                                                      06MAR2024 (CPU A) 
---SAS/ACCESS Interface to Greenplum                                                                    06MAR2024 (CPU A) 
---SAS/ACCESS Interface to SAP IQ                                                                       06MAR2024 (CPU A) 
---SAS/ACCESS to Hadoop                                                                                 06MAR2024 (CPU A) 
---SAS/ACCESS to Vertica                                                                                06MAR2024 (CPU A) 
---SAS/ACCESS to Postgres                                                                               06MAR2024 (CPU A) 
---SAS/ACCESS to Impala                                                                                 06MAR2024 (CPU A) 
---SAS/ACCESS to Salesforce                                                                             06MAR2024 (CPU A) 
                                                           The SAS System

---SAS/ACCESS to Amazon Redshift                                                                        06MAR2024 (CPU A) 
---SAS/ACCESS to Mongo DB                                                                               06MAR2024 (CPU A) 
---High Performance Suite                                                                               06MAR2024 (CPU A) 
---SAS Add-in for Microsoft Excel                                                                       06MAR2024 (CPU A) 
---SAS Add-in for Microsoft Outlook                                                                     06MAR2024 (CPU A) 
---SAS Add-in for Microsoft PowerPoint                                                                  06MAR2024 (CPU A) 
---SAS Add-in for Microsoft Word                                                                        06MAR2024 (CPU A) 
---SAS Search and Indexing Server                                                                       06MAR2024 (CPU A) 
---SAS Web Crawler Server                                                                               06MAR2024 (CPU A) 
---Model Mgmt Shared Macros                                                                             06MAR2024 (CPU A) 
---SAS LASR Analytic Server                                                                             06MAR2024 (CPU A) 
---SAS Time Series Workspace Macros                                                                     06MAR2024 (CPU A) 
---SAS Visual Analytics Hub                                                                             06MAR2024 (CPU A) 
---SAS Visual Analytics Services                                                                        06MAR2024 (CPU A) 
---SAS/ACCESS to SAP HANA                                                                               06MAR2024 (CPU A) 
---IMSTAT                                                                                               06MAR2024 (CPU A) 
---SAS/ACCESS Interface to Yellowbrick                                                                  06MAR2024 (CPU A) 
---High Performance Data Mining MPP                                                                     06MAR2024 (CPU A) 
---High Performance ETS MPP                                                                             06MAR2024 (CPU A) 
---High Performance Forecasting MPP                                                                     06MAR2024 (CPU A) 
---High Performance OR MPP                                                                              06MAR2024 (CPU A) 
---High Performance STAT MPP                                                                            06MAR2024 (CPU A) 
---High Performance Text Mining MPP                                                                     06MAR2024 (CPU A) 
---Decision Manager Server                                                                              06MAR2024 (CPU A) 
---Advanced Programming for LASR Analytic Server                                                        06MAR2024 (CPU A) 
---High Performance Analytics Distributed Mode                                                          06MAR2024 (CPU A) 
---SAS Visual Analytics Server Components                                                               06MAR2024 (CPU A) 
---SAS Visual Statistics Mid-tier                                                                       06MAR2024 (CPU A) 
---SAS/ACCESS Interface to the PI System                                                                06MAR2024 (CPU A) 
---Factory Miner Services API                                                                           06MAR2024 (CPU A) 
---Visual Analytics Explorer                                                                            06MAR2024 (CPU A) 
---SAS/ACCESS to Spark                                                                                  06MAR2024 (CPU A) 
---SAS/ACCESS to JDBC                                                                                   06MAR2024 (CPU A) 
---SAS/ACCESS to Google BigQuery                                                                        06MAR2024 (CPU A) 
---SAS/ACCESS to Snowflake                                                                              06MAR2024 (CPU A) 
NOTE: The PROC SETINIT source file has been updated.

MPRINT(SASINSTALLREPORTER):   data license;
MPRINT(SASINSTALLREPORTER):   length prodnum $ 10 diedate $ 9 cmpont $ 64;
MPRINT(SASINSTALLREPORTER):   label prodnum = 'PRODNUM';
MPRINT(SASINSTALLREPORTER):   label diedate = 'DIE DATE';
MPRINT(SASINSTALLREPORTER):   label cmpont = 'COMPONENT ----------------------------------------';
MPRINT(SASINSTALLREPORTER):   retain expires dies grace warn 0;
MPRINT(SASINSTALLREPORTER):   keep prodnum diedate cmpont;
SYMBOLGEN:  Macro variable LICENSE resolves to /tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030
MPRINT(SASINSTALLREPORTER):   infile "/tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030" lrecl=100 pad;
MPRINT(SASINSTALLREPORTER):   input;
MPRINT(SASINSTALLREPORTER):   if length(_infile_) < 2 then delete;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: "     EXPIRE" then expires = input(scan(_infile_,2," ='"),date9.);
MPRINT(SASINSTALLREPORTER):   if _infile_ =: "     BIRTHDAY" then do;
MPRINT(SASINSTALLREPORTER):   grace = input(scan(_infile_,4,' ='),2.);
MPRINT(SASINSTALLREPORTER):   call symput('GRACE',put(grace,2.));
MPRINT(SASINSTALLREPORTER):   warn = input(scan(_infile_,6,' ='),2.);
MPRINT(SASINSTALLREPORTER):   call symput('WARN',put(warn,2.));
MPRINT(SASINSTALLREPORTER):   dies = expires + grace + warn;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: "   EXPIRE" then do;
MPRINT(SASINSTALLREPORTER):   prodnum=substr(_infile_,11,10);
                                                           The SAS System

MPRINT(SASINSTALLREPORTER):   len=index(_infile_,' */')-25;
MPRINT(SASINSTALLREPORTER):   cmpont=substr(_infile_,25,len);
MPRINT(SASINSTALLREPORTER):   diedate = scan(substr(_infile_,len+28),1," '");
MPRINT(SASINSTALLREPORTER):   if diedate = "*" then diedate = put(dies,date9.);
MPRINT(SASINSTALLREPORTER):   else diedate = put(input(diedate,date9.)+grace+warn,date9.);
MPRINT(SASINSTALLREPORTER):   output;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: The infile "/tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030" is:
      Filename=/tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030,
      Owner Name=sas,Group Name=sas,
      Access Permission=-rw-rw-r--,
      Last Modified=23Nov2023:15:15:53,
      File Size (bytes)=8547

NOTE: 138 records were read from the infile "/tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00030".
      The minimum record length was 1.
      The maximum record length was 93.
NOTE: The data set WORK.LICENSE has 121 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   filename license;
NOTE: Fileref LICENSE has been deassigned.
MPRINT(SASINSTALLREPORTER):   data licensed;
MPRINT(SASINSTALLREPORTER):   length label $ 64 begin $ 10;
MPRINT(SASINSTALLREPORTER):   retain fmtname "license" type "c";
MPRINT(SASINSTALLREPORTER):   set license(rename=(prodnum=start cmpont=label));
MPRINT(SASINSTALLREPORTER):   run;

NOTE: Variable begin is uninitialized.
NOTE: There were 121 observations read from the data set WORK.LICENSE.
NOTE: The data set WORK.LICENSED has 121 observations and 6 variables.

MPRINT(SASINSTALLREPORTER):   proc format cntlin=licensed;
ERROR: For format $LICENSE, this range is repeated, or values overlap: PRODNUM130-PRODNUM130.
MPRINT(SASINSTALLREPORTER):   run;

WARNING: RUN statement ignored due to previous errors. Submit QUIT; to terminate the procedure.
NOTE: The SAS System stopped processing this step because of errors.
NOTE: There were 121 observations read from the data set WORK.LICENSED.
MPRINT(SASINSTALLREPORTER):   * Set SASVER macro variable now in case runstatus changes it: ;
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is SASVER)
SYMBOLGEN:  Macro variable SYSVER resolves to 9.4
MPRINT(SASINSTALLREPORTER):   ************************************************************************;
MPRINT(SASINSTALLREPORTER):   * The following code runs if SAS is 9.1.3 and allows surfacing certain *;
MPRINT(SASINSTALLREPORTER):   * custom product versions and executable build versions. *;
MPRINT(SASINSTALLREPORTER):   ************************************************************************;
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
MLOGIC(SASINSTALLREPORTER):  %IF condition "&SYSVLONG" > "9.01.01M3" is TRUE
MPRINT(SASINSTALLREPORTER):   filename statlog temp;


MPRINT(SASINSTALLREPORTER):   proc printto log=statlog new;
MPRINT(SASINSTALLREPORTER):   run;


MPRINT(SASINSTALLREPORTER):   data prodstat;
MPRINT(SASINSTALLREPORTER):   infile statlog firstobs=1 length=len;
MPRINT(SASINSTALLREPORTER):   length component $64 custver $10 imgver $16;
MPRINT(SASINSTALLREPORTER):   retain component custver imgver ' ';
MPRINT(SASINSTALLREPORTER):   *format component $license.;
MPRINT(SASINSTALLREPORTER):   label component = 'COMPONENT ------------------------------------' custver = 'Custom version' imgver 
= 'Build version';
MPRINT(SASINSTALLREPORTER):   input;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: 'NOTE: SAS' then do;
MPRINT(SASINSTALLREPORTER):   call symput('sasver',substr(_infile_,11));
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: 'For ' then do;
MPRINT(SASINSTALLREPORTER):   if component ^= ' ' then output;
NOTE: Line generated by the invoked macro "SASINSTALLREPORTER".
1463       (_infile_,5,len-8);              component = put(component,$license.);              imgver = ' ';           end;
                                                                      _________
                                                                      48
1463     ! if _infile_ =: '   Custom' then           custver = substr(_infile_,32);        if _infile_ =: '   Image' then
1463     ! imgver =
MPRINT(SASINSTALLREPORTER):   component = substr(_infile_,5,len-8);
MPRINT(SASINSTALLREPORTER):   component = put(component,$license.);
MPRINT(SASINSTALLREPORTER):   imgver = ' ';
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: '   Custom' then custver = substr(_infile_,32);
MPRINT(SASINSTALLREPORTER):   if _infile_ =: '   Image' then imgver = substr(_infile_,31);
MPRINT(SASINSTALLREPORTER):   run;

ERROR 48-59: The format $LICENSE was not found or could not be loaded.

NOTE: The SAS System stopped processing this step because of errors.
WARNING: The data set WORK.PRODSTAT may be incomplete.  When this step was stopped there were 0 observations and 3 variables.


MPRINT(SASINSTALLREPORTER):   filename statlog;
NOTE: Fileref STATLOG has been deassigned.
MLOGIC(SASINSTALLREPORTER):  %GLOBAL  _SASSPLEVEL
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is _SASSPLEVEL)
SYMBOLGEN:  Macro variable SASVER resolves to 9.4
SYMBOLGEN:  Macro variable SYSVLONG4 resolves to 9.04.01M8P01182023
MPRINT(SASINSTALLREPORTER):   ************************************************************************;
MPRINT(SASINSTALLREPORTER):   * Define format to identify products associated with hot fixes. *;
MPRINT(SASINSTALLREPORTER):   ************************************************************************;
MPRINT(SASINSTALLREPORTER):   proc format;
MPRINT(SASINSTALLREPORTER):   value $hfprod 'BA','BB','BC','BD','BX' = 'Base SAS' 'AD' = 'SAS/Access Interface to ADABAS' 'DD' = 
'SAS/Access Interface to CA-Datacom/DB' 'D2' = 'SAS/Access Interface to DB2' 'SQ' = 'SAS/Access Interface to DB2 for VM' 'ID' = 
'SAS/Access Interface to CA-IDMS' 'MS' = 'SAS/Access Interface to IMS-DL/I' 'IF' = 'SAS/Access Interface to Informix' 'IG' = 
'SAS/Access Interface to CA-OpenIngres' 'OD' = 'SAS/Access Interface to ODBC Server' 'OL' = 'SAS/Access Interface to OLE DB' 'OC' = 
'SAS/Access Interface to Oracle' 'PF' = 'SAS/Access Interface to PC File Formats' 'PE' = 'SAS/Access Interface to PeopleSoft' 'R3' 
= 'SAS/Access Interface to R/3' 'BW' = 'SAS/Access Interface to SAP BW' 'SB' = 'SAS/Access Interface to Sybase' 'S2' = 'SAS/Access 
Interface to System 2000' 'TE' = 'SAS/Access Interface to Teradata' 'NW' = 'SAS/Access Interface to HP Neoview' 'NZ' = 'SAS/Access 
Interface to Netezza' 'YQ' = 'SAS/Access Interface to MySQL' 'AS' = 'SAS/ASSIST' 'CT' = 'SAS/CONNECT' 'ES' = 'SAS/EIS' 'DT' = 
'Enterprise Miner' 'ET' = 'SAS/ETS' 'FS' = 'SAS/FSP' 'GN' = 'SAS/Genetics' 'GR' = 'SAS/GRAPH' 'ML' = 'SAS/IML' 'IH' = 'Integration 
Technologies' 'WB' = 'SAS/IntrNet' 'IS' = 'IT Service Vision' 'MX' = 'SAS/MDDB Server' 'OR' = 'SAS/OR' 'QC' = 'SAS/QC' 'RI' = 'Risk 
                                                           The SAS System

Dimensions' 'SH' = 'SAS/SHARE' 'ST' = 'SAS/STAT' 'TM' = 'SAS Text Miner' 'WH' = 'SAS Warehouse Administrator' 'WD' = 'WebHound' 
'WW' = 'Jscore' 'HP' = 'SAS HPF' 'QL' = 'SAS Data Quality Server' 'SD' = 'SAS/SECURE' 'HO' = 'Service Pack' 'AM' = 'SAS Anti-Money 
Laundering' 'WN' = 'SAS Web Analytics' 'IN' = 'SAS Scoring Accelerator for Teradata' 'MM' = 'SAS Marketing Automation' 'CG' = 
'Campaign Management Component' 'SP' = 'Strategic Performance Management' 'FI' = 'Financial Managment Solution' 'APCORE' = 
'Analytics Platform' 'DMINECLT' = 'Enterprise Miner client' 'CITATNWEB' = 'SAS Web Report Studio' 'DATABLDR' = 'DI Studio' 
'JPORTAL' = 'Information Delivery Portal' 'JPS' = 'Foundation Services' 'MAPCNTR' = 'Information Map Studio' 'QRSERVICES' = 'Query 
and Reporting Services' 'SMC' = 'SAS Management Console' 'WEBINFRAKIT' = 'SAS Web Infrastructure Kit' 'WEBOLAPVR' = 'SAS Web OLAP 
Viewer' 'WEBRPTVR' = 'SAS Web Report Viewer' 'MITIBRIDGE' = 'SAS Metadata Bridge' 
'EMAAUXDATAIO','EMACORE','EMALAUNCHER','EMASMC','EMAWEBNPORT' = 'SAS Digital Marketing' 'FORCASTSTDO' = 'Forecast Studio' 
'FORCASTSRVR' = 'Forecast Server' 'DA' = 'Enterprise Miner Server' 'MMAPI' = 'Model Manager Mid Tier' 'MMGUI' = 'Model Manager 
Client' 'TMCLIENT' = 'Text Miner Client' 'CR' = 'Credit Scoring' ;
NOTE: Format $HFPROD has been output.
MPRINT(SASINSTALLREPORTER):   run;


MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LS)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is PS)
MPRINT(SASINSTALLREPORTER):   Title1 'SAS Install Reporter Version 4.0';
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is FILLLEN)
SYMBOLGEN:  Macro variable LS resolves to 132
SYMBOLGEN:  Macro variable _SASSPLEVEL resolves to SAS 9.4 (9.04.01M8P01182023)
SYMBOLGEN:  Macro variable SYSSITE resolves to 70068118
SYMBOLGEN:  Macro variable _SASSPLEVEL resolves to SAS 9.4 (9.04.01M8P01182023)
MPRINT(SASINSTALLREPORTER):   Title3
MLOGIC(DASH):  Beginning execution.
SYMBOLGEN:  Macro variable FILLLEN resolves to 90
MLOGIC(DASH):  Parameter FILLLEN has value 90
SYMBOLGEN:  Macro variable FILLLEN resolves to 90
MLOGIC(DASH):  %DO loop beginning; index variable I; start value is 1; stop value is 90; by value is 1.  
MLOGIC(DASH):  %DO loop index variable I is now 2; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 3; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 4; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 5; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 6; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 7; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 8; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 9; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 10; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 11; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 12; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 13; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 14; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 15; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 16; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 17; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 18; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 19; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 20; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 21; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 22; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 23; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 24; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 25; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 26; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 27; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 28; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 29; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 30; loop will iterate again.
                                                           The SAS System

MLOGIC(DASH):  %DO loop index variable I is now 31; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 32; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 33; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 34; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 35; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 36; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 37; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 38; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 39; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 40; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 41; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 42; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 43; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 44; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 45; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 46; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 47; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 48; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 49; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 50; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 51; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 52; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 53; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 54; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 55; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 56; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 57; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 58; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 59; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 60; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 61; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 62; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 63; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 64; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 65; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 66; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 67; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 68; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 69; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 70; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 71; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 72; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 73; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 74; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 75; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 76; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 77; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 78; loop will iterate again.
NOTE: The quoted string currently being processed has become more than 262 characters long.  You might have unbalanced quotation 
      marks.
MLOGIC(DASH):  %DO loop index variable I is now 79; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 80; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 81; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 82; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 83; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 84; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 85; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 86; loop will iterate again.
                                                           The SAS System

MLOGIC(DASH):  %DO loop index variable I is now 87; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 88; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 89; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 90; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 91; loop will not iterate again.
MLOGIC(DASH):  Ending execution.
SYMBOLGEN:  Macro variable SYSSITE resolves to 70068118
MPRINT(SASINSTALLREPORTER):   "SAS 9.4 (9.04.01M8P01182023)                                                                         
                 SITE: 70068118";
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is FILLLEN)
SYMBOLGEN:  Macro variable LS resolves to 132
SYMBOLGEN:  Macro variable MACHINE resolves to sasserver
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
SYMBOLGEN:  Macro variable SYSSCPL resolves to Linux
SYMBOLGEN:  Macro variable MACHINE resolves to sasserver
MPRINT(SASINSTALLREPORTER):   Title4
MLOGIC(DASH):  Beginning execution.
SYMBOLGEN:  Macro variable FILLLEN resolves to 98
MLOGIC(DASH):  Parameter FILLLEN has value 98
SYMBOLGEN:  Macro variable FILLLEN resolves to 98
MLOGIC(DASH):  %DO loop beginning; index variable I; start value is 1; stop value is 98; by value is 1.  
MLOGIC(DASH):  %DO loop index variable I is now 2; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 3; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 4; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 5; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 6; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 7; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 8; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 9; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 10; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 11; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 12; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 13; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 14; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 15; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 16; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 17; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 18; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 19; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 20; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 21; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 22; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 23; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 24; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 25; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 26; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 27; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 28; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 29; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 30; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 31; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 32; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 33; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 34; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 35; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 36; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 37; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 38; loop will iterate again.
                                                           The SAS System

MLOGIC(DASH):  %DO loop index variable I is now 39; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 40; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 41; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 42; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 43; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 44; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 45; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 46; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 47; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 48; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 49; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 50; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 51; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 52; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 53; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 54; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 55; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 56; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 57; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 58; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 59; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 60; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 61; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 62; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 63; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 64; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 65; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 66; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 67; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 68; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 69; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 70; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 71; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 72; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 73; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 74; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 75; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 76; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 77; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 78; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 79; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 80; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 81; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 82; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 83; loop will iterate again.
NOTE: The quoted string currently being processed has become more than 262 characters long.  You might have unbalanced quotation 
      marks.
MLOGIC(DASH):  %DO loop index variable I is now 84; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 85; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 86; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 87; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 88; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 89; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 90; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 91; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 92; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 93; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 94; loop will iterate again.
                                                           The SAS System

MLOGIC(DASH):  %DO loop index variable I is now 95; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 96; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 97; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 98; loop will iterate again.
MLOGIC(DASH):  %DO loop index variable I is now 99; loop will not iterate again.
MLOGIC(DASH):  Ending execution.
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
SYMBOLGEN:  Macro variable SYSSCPL resolves to Linux
MPRINT(SASINSTALLREPORTER):   "HOST: sasserver                                                                                      
            OS: LIN X64 (Linux)";
MPRINT(SASINSTALLREPORTER):   Proc print data=license noobs uniform label;
MPRINT(SASINSTALLREPORTER):   title6 "1: Products, components, or solutions that are licensed";
SYMBOLGEN:  Macro variable GRACE resolves to 45
SYMBOLGEN:  Macro variable WARN resolves to 45
MPRINT(SASINSTALLREPORTER):   title8 "Note: 'DIE DATE' is product expiration date plus 45 GRACE days and 45 WARN days";
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 121 observations read from the data set WORK.LICENSE.
NOTE: The PROCEDURE PRINT printed pages 6-8.

MLOGIC(SASINSTALLREPORTER):  %LET (variable name is INSTALLER)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is CONFIGLOC)
MPRINT(SASINSTALLREPORTER):   data orders;
MPRINT(SASINSTALLREPORTER):   length order $ 32;
MPRINT(SASINSTALLREPORTER):   stop;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: Variable order is uninitialized.
NOTE: The data set WORK.ORDERS has 0 observations and 1 variables.

SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
MLOGIC(SASINSTALLREPORTER):  %IF condition "&SYSVLONG" > "9.02.01" is TRUE
MPRINT(SASINSTALLREPORTER):   ***********************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code determines what is installed by reading the Registry.xml *;
MPRINT(SASINSTALLREPORTER):   * file in a SAS 9.2+ environment. This covers products, most clients, *;
MPRINT(SASINSTALLREPORTER):   * solutions, and hot fixes for all. *;
MPRINT(SASINSTALLREPORTER):   ***********************************************************************;
MPRINT(SASINSTALLREPORTER):   data components(drop=hotfix order applied) hotfixes(drop=custver component order) orders(keep=order);
MPRINT(SASINSTALLREPORTER):   length component $ 64 custver $ 16 compid $ 16 hotfix $ 8 applied $ 20;
MPRINT(SASINSTALLREPORTER):   retain component custver compid;
MPRINT(SASINSTALLREPORTER):   length section $ 8;
MPRINT(SASINSTALLREPORTER):   retain section;
MPRINT(SASINSTALLREPORTER):   drop section;
MPRINT(SASINSTALLREPORTER):   length keyname $ 16;
MPRINT(SASINSTALLREPORTER):   retain keyname;
MPRINT(SASINSTALLREPORTER):   drop keyname;
MPRINT(SASINSTALLREPORTER):   length key 8;
MPRINT(SASINSTALLREPORTER):   retain key 0;
MPRINT(SASINSTALLREPORTER):   drop key;
MPRINT(SASINSTALLREPORTER):   label component = 'COMPONENT ----------------------------------------';
MPRINT(SASINSTALLREPORTER):   label hotfix = 'HOT FIX -------';
MPRINT(SASINSTALLREPORTER):   label applied = "APPLIED -------------------";
MPRINT(SASINSTALLREPORTER):   length order $ 32;
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
                                                           The SAS System

MPRINT(SASINSTALLREPORTER):   infile "/opt/sasinside/SASHome/deploymntreg/registry.xml";
MPRINT(SASINSTALLREPORTER):   input;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'</Key>') then do;
MPRINT(SASINSTALLREPORTER):   key+-1;
MPRINT(SASINSTALLREPORTER):   if key=4 then output components;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if index(_infile_,'<Key ') then do;
MPRINT(SASINSTALLREPORTER):   key+1;
MPRINT(SASINSTALLREPORTER):   keyname = scan(_infile_,2,'"');
MPRINT(SASINSTALLREPORTER):   if key=4 then compid = keyname;
MPRINT(SASINSTALLREPORTER):   else if key=2 then section = keyname;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if section = 'INSTALL' then do;
MPRINT(SASINSTALLREPORTER):   if key=5 then do;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'name="order"') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   order=name;
MPRINT(SASINSTALLREPORTER):   if order ^= lag(order) then output orders;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if index(_infile_,'name="displayname"') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   component=tranwrd(name,'&amp;','&');
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if index(_infile_,'name="timestamp"') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   applied=name;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if key=7 then do;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'name="displayname"') then if index(_infile_,'data="Hotfix ') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   hotfix = substr(name,8);
MPRINT(SASINSTALLREPORTER):   output hotfixes;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   custver=name;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if section = 'COMMON' then do;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'name="sashome"') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   call symput('sashome',trim(name));
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if index(_infile_,'name="install_user"') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   call symput('installer',trim(name));
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   else if section = 'CONFIG' then do;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'name="location"') then do;
MPRINT(SASINSTALLREPORTER):   link INNAME;
MPRINT(SASINSTALLREPORTER):   call symput(keyname,trim(name));
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   return;
MPRINT(SASINSTALLREPORTER):   INNAME: length name $ 64;
                                                           The SAS System

MPRINT(SASINSTALLREPORTER):   drop name;
MPRINT(SASINSTALLREPORTER):   inname=index(_infile_,'data="');
MPRINT(SASINSTALLREPORTER):   drop inname;
MPRINT(SASINSTALLREPORTER):   name=scan(substr(_infile_,inname),2,'"');
MPRINT(SASINSTALLREPORTER):   return;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: The infile "/opt/sasinside/SASHome/deploymntreg/registry.xml" is:
      Filename=/opt/sasinside/SASHome/deploymntreg/registry.xml,
      Owner Name=sas,Group Name=sas,
      Access Permission=-rw-r--r--,
      Last Modified=08Mar2023:07:46:47,
      File Size (bytes)=808578

NOTE: 12748 records were read from the infile "/opt/sasinside/SASHome/deploymntreg/registry.xml".
      The minimum record length was 10.
      The maximum record length was 212.
NOTE: The data set WORK.COMPONENTS has 424 observations and 3 variables.
NOTE: The data set WORK.HOTFIXES has 115 observations and 3 variables.
NOTE: The data set WORK.ORDERS has 139 observations and 1 variables.

MPRINT(SASINSTALLREPORTER):   proc sort data=orders nodupkey;
MPRINT(SASINSTALLREPORTER):   by order;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 139 observations read from the data set WORK.ORDERS.
NOTE: 136 observations with duplicate key values were deleted.
NOTE: The data set WORK.ORDERS has 3 observations and 1 variables.

MPRINT(SASINSTALLREPORTER):   proc sort data=components;
MPRINT(SASINSTALLREPORTER):   by compid descending custver;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 424 observations read from the data set WORK.COMPONENTS.
NOTE: The data set WORK.COMPONENTS has 424 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   proc sort data=components nodupkey;
MPRINT(SASINSTALLREPORTER):   by compid;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 424 observations read from the data set WORK.COMPONENTS.
NOTE: 54 observations with duplicate key values were deleted.
NOTE: The data set WORK.COMPONENTS has 370 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   proc sort data=hotfixes nodup;
MPRINT(SASINSTALLREPORTER):   by hotfix;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 115 observations read from the data set WORK.HOTFIXES.
NOTE: 0 duplicate observations were deleted.
NOTE: The data set WORK.HOTFIXES has 115 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   proc sort data=hotfixes;
MPRINT(SASINSTALLREPORTER):   by compid;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 115 observations read from the data set WORK.HOTFIXES.
NOTE: The data set WORK.HOTFIXES has 115 observations and 3 variables.
                                                           The SAS System


MPRINT(SASINSTALLREPORTER):   data hotfixes(drop=custver compid);
MPRINT(SASINSTALLREPORTER):   merge hotfixes(in=hf) components;
MPRINT(SASINSTALLREPORTER):   by compid;
MPRINT(SASINSTALLREPORTER):   if hf;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 115 observations read from the data set WORK.HOTFIXES.
NOTE: There were 370 observations read from the data set WORK.COMPONENTS.
NOTE: The data set WORK.HOTFIXES has 115 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   proc sort data=hotfixes nodupkey;
MPRINT(SASINSTALLREPORTER):   by hotfix;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 115 observations read from the data set WORK.HOTFIXES.
NOTE: 0 observations with duplicate key values were deleted.
NOTE: The data set WORK.HOTFIXES has 115 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   ***********************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code determines components and hot fixes that are installed in *;
MPRINT(SASINSTALLREPORTER):   * SAS 9.1.3 only (and are Java based) as determined by vpd.properties *;
MPRINT(SASINSTALLREPORTER):   * file. On Windows, this is under the %WinDir% path, on UNIX it will *;
MPRINT(SASINSTALLREPORTER):   * be under the home directory (~) of the installer user. If found, *;
MPRINT(SASINSTALLREPORTER):   * these will be appended to the above components data set, and if any *;
MPRINT(SASINSTALLREPORTER):   * Java app hot fixes are found, an xhotfix data set will be created. *;
MPRINT(SASINSTALLREPORTER):   ***********************************************************************;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSSCP = WIN is FALSE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is VPDDIR)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is XHOTFIX)
SYMBOLGEN:  Macro variable VPDDIR resolves to ~
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
MLOGIC(SASINSTALLREPORTER):  %IF condition %SYSFUNC(FILEEXIST(&vpddir.&slsh.vpd.properties)) and     "&SYSVLONG" > "9.01.01M3" and 
      "&SYSVLONG" < "9.02" is FALSE
MPRINT(SASINSTALLREPORTER):   proc sort data=components nodupkey;
MPRINT(SASINSTALLREPORTER):   by component;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 370 observations read from the data set WORK.COMPONENTS.
NOTE: 2 observations with duplicate key values were deleted.
NOTE: The data set WORK.COMPONENTS has 368 observations and 3 variables.

MPRINT(SASINSTALLREPORTER):   Proc print data=components noobs uniform label;
MPRINT(SASINSTALLREPORTER):   title6 "2: Products, components, or solutions that are physically installed";
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 368 observations read from the data set WORK.COMPONENTS.
NOTE: The PROCEDURE PRINT printed pages 9-16.

MPRINT(SASINSTALLREPORTER):   ****************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code checks to see what SAS maintenance is on, pre-9.2 *;
MPRINT(SASINSTALLREPORTER):   ****************************************************************;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
                                                           The SAS System

MLOGIC(SASINSTALLREPORTER):  %IF condition "&SYSSCP" ne "WIN" is TRUE
SYMBOLGEN:  Macro variable SYSVER resolves to 9.4
MLOGIC(SASINSTALLREPORTER):  %IF condition "&SYSVER" >= "9.1" is TRUE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is HFPATH)
SYMBOLGEN:  Macro variable SASROOT resolves to /opt/sasinside/SASHome/SASFoundation/9.4
SYMBOLGEN:  Macro variable HFPATH resolves to /opt/sasinside/SASHome/SASFoundation/9.4/install/admin/history.hotfix
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&hfpath")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %IF condition not(%sysfunc(exist(hotfixes))) is FALSE
SYMBOLGEN:  Macro variable XHOTFIX resolves to 0
MLOGIC(SASINSTALLREPORTER):  %IF condition &xhotfix is FALSE
MPRINT(SASINSTALLREPORTER):   proc print data=hotfixes noobs uniform label;
SYMBOLGEN:  Macro variable _SASSPLEVEL resolves to SAS 9.4 (9.04.01M8P01182023)
MPRINT(SASINSTALLREPORTER):   title6 "3: Status of Hot Fixes found for SAS 9.4 (9.04.01M8P01182023)";
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 115 observations read from the data set WORK.HOTFIXES.
NOTE: The PROCEDURE PRINT printed pages 17-19.

MPRINT(SASINSTALLREPORTER):   ****************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code checks to see what client apps are installed in *;
MPRINT(SASINSTALLREPORTER):   * addition to the SAS system. Examples include SAS Eminer *;
MPRINT(SASINSTALLREPORTER):   * Tree Viewer, SAS System Viewer etc. However, no further *;
MPRINT(SASINSTALLREPORTER):   * analysis is done for these (hot fixes, etc.) *;
MPRINT(SASINSTALLREPORTER):   ****************************************************************;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSSCP = WIN or "&SYSVLONG" > "9.01.01M3" is TRUE
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(SASINSTALLREPORTER):   filename appfile "/opt/sasinside/SASHome/";
MPRINT(SASINSTALLREPORTER):   data temp2;
MPRINT(SASINSTALLREPORTER):   length appname $ 64;
MPRINT(SASINSTALLREPORTER):   label appname = 'COMPONENT ---------------------------';
MPRINT(SASINSTALLREPORTER):   ap=dopen('appfile');
MPRINT(SASINSTALLREPORTER):   nm=dnum(ap);
MPRINT(SASINSTALLREPORTER):   do i=1 to nm;
MPRINT(SASINSTALLREPORTER):   appname=dread(ap,i);
MPRINT(SASINSTALLREPORTER):   appdot=index(appname,'.');
MPRINT(SASINSTALLREPORTER):   if appdot then appdot = verify(substr(appname,appdot+1,1),'0123456789');
MPRINT(SASINSTALLREPORTER):   if upcase(appname) not in ('SETUP LOGS', 'INSTALL', 'GEN1', 'UNINST', 'DEPLOYMNTREG', 'INSTALLMISC') 
and not(appdot) then output;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   ap=dclose(ap);
MPRINT(SASINSTALLREPORTER):   keep appname;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: The data set WORK.TEMP2 has 108 observations and 1 variables.

MPRINT(SASINSTALLREPORTER):   filename appfile;
NOTE: Fileref APPFILE has been deassigned.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is T9)
MPRINT(SASINSTALLREPORTER):   ****************************************************************;
MPRINT(SASINSTALLREPORTER):   * If we are on Windows, and if we can issue OS commands, then *;
MPRINT(SASINSTALLREPORTER):   * we can query the Windows registry to see what other SAS *;
MPRINT(SASINSTALLREPORTER):   * clients and solutions (EG, SMC, etc.) are installed. *;
MPRINT(SASINSTALLREPORTER):   ****************************************************************;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
                                                           The SAS System

SYMBOLGEN:  Macro variable XCMD resolves to XCMD
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSSCP = WIN and &XCMD = XCMD is FALSE
MPRINT(SASINSTALLREPORTER):   ***********************************************************;
MPRINT(SASINSTALLREPORTER):   * Then we print out the SAS products and SAS components *;
MPRINT(SASINSTALLREPORTER):   * that are installed *;
MPRINT(SASINSTALLREPORTER):   ***********************************************************;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSSCP = WIN is FALSE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is FTYPE)
MPRINT(SASINSTALLREPORTER):   proc print data=temp2 noobs uniform label;
MPRINT(SASINSTALLREPORTER):   title6 "4: Possible Other SAS Insitute Applications or Clients Installed";
SYMBOLGEN:  Macro variable FTYPE resolves to directories
MPRINT(SASINSTALLREPORTER):   title8 "These are just directories or file names in the SAS installation path";
SYMBOLGEN:  Macro variable T9 resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(SASINSTALLREPORTER):   ;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: There were 108 observations read from the data set WORK.TEMP2.
NOTE: The PROCEDURE PRINT printed pages 20-22.

MPRINT(SASINSTALLREPORTER):   quit;
MPRINT(SASINSTALLREPORTER):   ********************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code provides information for certain things beyond basic *;
MPRINT(SASINSTALLREPORTER):   * install information that is available in SAS 9.1.3 and later *;
MPRINT(SASINSTALLREPORTER):   ********************************************************************;
SYMBOLGEN:  Macro variable SYSVLONG resolves to 9.04.01M8P011823
MLOGIC(SASINSTALLREPORTER):  %IF condition "&SYSVLONG" > "9.01.01M3" is TRUE
MPRINT(SASINSTALLREPORTER):   *************************************************************************;
MPRINT(SASINSTALLREPORTER):   * The following code runs if SAS is 9.1.3 and prints out the previously *;
MPRINT(SASINSTALLREPORTER):   * determined custom product versions and executable build versions. *;
MPRINT(SASINSTALLREPORTER):   *************************************************************************;
MPRINT(SASINSTALLREPORTER):   Proc print data=prodstat noobs uniform label;
MPRINT(SASINSTALLREPORTER):   title6 "5: Custom Version Information for Selected SAS Institute Products or Components";
MPRINT(SASINSTALLREPORTER):   run;

NOTE: No observations in data set WORK.PRODSTAT.

MPRINT(SASINSTALLREPORTER):   ****************************************************************;
MPRINT(SASINSTALLREPORTER):   * The following code runs if SAS is 9.1.3 and allows surfacing *;
MPRINT(SASINSTALLREPORTER):   * the Java/JRE installation and version information. *;
MPRINT(SASINSTALLREPORTER):   ****************************************************************;
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is CURRERR)
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MPRINT(SASINSTALLREPORTER):   filename javalog temp;
MPRINT(SASINSTALLREPORTER):   proc printto log=javalog new;
MPRINT(SASINSTALLREPORTER):   run;


SYMBOLGEN:  Macro variable CURRERR resolves to 0
SYMBOLGEN:  Macro variable SYSERR resolves to 0
MLOGIC(SASINSTALLREPORTER):  %IF condition not((&currerr = 0) and (&syserr ^= 0)) is TRUE
MPRINT(SASINSTALLREPORTER):   title6 "6: SAS Java Environment Installation Information";
MPRINT(SASINSTALLREPORTER):   title7 " ";
MPRINT(SASINSTALLREPORTER):   data _null_;
MPRINT(SASINSTALLREPORTER):   infile javalog firstobs=8;
MPRINT(SASINSTALLREPORTER):   file print;
MPRINT(SASINSTALLREPORTER):   input;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'The SAS System') then delete;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: 'NOTE:' then stop;
MPRINT(SASINSTALLREPORTER):   put '   ' _infile_;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: The infile JAVALOG is:
      Filename=/tmp/SAS_work9C520000044B_sasserver.demo.sas.com/#LN00039,
      Owner Name=sas,Group Name=sas,
      Access Permission=-rw-rw-r--,
      Last Modified=23Nov2023:15:15:54,
      File Size (bytes)=1306

NOTE: 19 lines were written to file PRINT.
NOTE: 24 records were read from the infile JAVALOG.
      The minimum record length was 0.
      The maximum record length was 103.
NOTE: The DATA step printed page 23.

MPRINT(SASINSTALLREPORTER):   filename javalog;
NOTE: Fileref JAVALOG has been deassigned.
MPRINT(SASINSTALLREPORTER):   ********************************************************************;
MPRINT(SASINSTALLREPORTER):   * This code provides information for the SAS deployment -- who did *;
MPRINT(SASINSTALLREPORTER):   * the install, BI config location if found, and software orders. *;
MPRINT(SASINSTALLREPORTER):   * The installer macro variable is only set if found in the above *;
MPRINT(SASINSTALLREPORTER):   * step that reads and processes the SAS 9.2+ registry.jnl file. *;
MPRINT(SASINSTALLREPORTER):   * On the wish list -- report the plan file used for BI install. *;
MPRINT(SASINSTALLREPORTER):   ********************************************************************;
SYMBOLGEN:  Macro variable INSTALLER resolves to sas
MLOGIC(SASINSTALLREPORTER):  %IF condition "&installer" ^= " " is TRUE
                                                           The SAS System

MLOGIC(SASINSTALLREPORTER):  %LET (variable name is PM)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LSF)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is GMS)
SYMBOLGEN:  Macro variable CONFIGLOC resolves to 
MLOGIC(SASINSTALLREPORTER):  %IF condition "&configloc " ^= " " is FALSE
MPRINT(SASINSTALLREPORTER):   title6 "7: Deployment information.";
MPRINT(SASINSTALLREPORTER):   title8 "(Basic SAS Deployment)";
MPRINT(SASINSTALLREPORTER):   data _null_;
MPRINT(SASINSTALLREPORTER):   file print;
MPRINT(SASINSTALLREPORTER):   put " " / " ";
SYMBOLGEN:  Macro variable SASHOME resolves to /opt/sasinside/SASHome
MPRINT(SASINSTALLREPORTER):   put "SAS Home:                         /opt/sasinside/SASHome";
SYMBOLGEN:  Macro variable INSTALLER resolves to sas
MPRINT(SASINSTALLREPORTER):   put "SAS Install User:                 sas";
MPRINT(SASINSTALLREPORTER):   put " ";
MPRINT(SASINSTALLREPORTER):   put "SAS software orders deployed:";
MPRINT(SASINSTALLREPORTER):   put " ";
MPRINT(SASINSTALLREPORTER):   do i=1 to nobs;
MPRINT(SASINSTALLREPORTER):   set orders point=i nobs=nobs;
MPRINT(SASINSTALLREPORTER):   put order;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   stop;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: 6 lines were written to file PRINT.
NOTE: The DATA step printed page 24.

SYMBOLGEN:  Macro variable CONFIGURATION001 resolves to /opt/sasinside/SASConfig
MLOGIC(SASINSTALLREPORTER):  %IF condition "&Configuration001 " ^= " " is TRUE
MPRINT(SASINSTALLREPORTER):   title8 "(BI Deployment)";
MPRINT(SASINSTALLREPORTER):   data _null_;
MPRINT(SASINSTALLREPORTER):   file print;
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is NUM)
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is TEST)
SYMBOLGEN:  Macro variable NUM resolves to 1
SYMBOLGEN:  Macro variable TEST resolves to Configuration001
MLOGIC(SASINSTALLREPORTER):  %DO %WHILE(%symexist(&test)) loop beginning; condition is TRUE.  
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is CONFIGLOC)
SYMBOLGEN:  && resolves to &.
SYMBOLGEN:  Macro variable TEST resolves to Configuration001
SYMBOLGEN:  Macro variable CONFIGURATION001 resolves to /opt/sasinside/SASConfig
MPRINT(SASINSTALLREPORTER):   put _page_;
MPRINT(SASINSTALLREPORTER):   put " ";
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
MPRINT(SASINSTALLREPORTER):   put "BI or other configured location:  /opt/sasinside/SASConfig";
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LEVELS)
MLOGIC(SASINSTALLREPORTER):  %DO loop beginning; index variable I; start value is 1; stop value is 10; by value is 1.  
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is TRUE
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LEVELS)
MLOGIC(SASINSTALLREPORTER):  Beginning compilation of TRIM using the autocall file 
      /opt/sasinside/SASHome/SASFoundation/9.4/sasautos/trim.sas.
MLOGIC(SASINSTALLREPORTER):  Ending compilation of TRIM.
MLOGIC(TRIM):  Beginning execution.
MLOGIC(TRIM):  This macro was compiled from the autocall file /opt/sasinside/SASHome/SASFoundation/9.4/sasautos/trim.sas
                                                           The SAS System

SYMBOLGEN:  Macro variable LEVELS resolves to 
MLOGIC(TRIM):  Parameter VALUE has value 
MLOGIC(TRIM):  %LOCAL  I
SYMBOLGEN:  Macro variable VALUE resolves to 
MLOGIC(TRIM):  %DO loop beginning; index variable I; start value is 0; stop value is 1; by value is -1.  Loop will not be executed.
SYMBOLGEN:  Macro variable I resolves to 0
MLOGIC(TRIM):  %IF condition &i>0 is FALSE
MLOGIC(TRIM):  Ending execution.
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 2; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 2
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 3; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 3
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 4; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 4
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 5; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 5
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 6; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 6
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 7; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 7
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 8; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 8
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 9; loop will iterate again.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 9
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 10; loop will iterate again.
                                                           The SAS System

SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 10
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.Lev&i")) is FALSE
MLOGIC(SASINSTALLREPORTER):  %DO loop index variable I is now 11; loop will not iterate again.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LEVELS)
SYMBOLGEN:  Macro variable LEVELS resolves to Lev1.
SYMBOLGEN:  Macro variable LEVELS resolves to Lev1
MPRINT(SASINSTALLREPORTER):   put "            Configured level(s):  Lev1";
MPRINT(SASINSTALLREPORTER):   put " ";
SYMBOLGEN:  Macro variable LEVELS resolves to Lev1
MLOGIC(SASINSTALLREPORTER):  %DO %WHILE(%length(&levels) > 3) loop beginning; condition is TRUE.  
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LEVEL)
SYMBOLGEN:  Macro variable LEVELS resolves to Lev1
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is LEVELS)
MLOGIC(SASINSTALLREPORTER):  Beginning compilation of LEFT using the autocall file 
      /opt/sasinside/SASHome/SASFoundation/9.4/sasautos/left.sas.
MLOGIC(SASINSTALLREPORTER):  Ending compilation of LEFT.
MLOGIC(LEFT):  Beginning execution.
MLOGIC(LEFT):  This macro was compiled from the autocall file /opt/sasinside/SASHome/SASFoundation/9.4/sasautos/left.sas
SYMBOLGEN:  Macro variable LEVELS resolves to Lev1
MLOGIC(LEFT):  Parameter TEXT has value 
MLOGIC(LEFT):  %LOCAL  I
SYMBOLGEN:  Macro variable TEXT resolves to 
MLOGIC(LEFT):  %IF condition %length(&text)=0 is TRUE
MLOGIC(LEFT):  %LET (variable name is TEXT)
MLOGIC(LEFT):  %LET (variable name is I)
MLOGIC(LEFT):  Beginning compilation of VERIFY using the autocall file /opt/sasinside/SASHome/SASFoundation/9.4/sasautos/verify.sas.
MLOGIC(LEFT):  Ending compilation of VERIFY.
MLOGIC(VERIFY):  Beginning execution.
MLOGIC(VERIFY):  This macro was compiled from the autocall file /opt/sasinside/SASHome/SASFoundation/9.4/sasautos/verify.sas
SYMBOLGEN:  Macro variable TEXT resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(VERIFY):  Parameter TEXT has value  
MLOGIC(VERIFY):  Parameter TARGET has value  
MLOGIC(VERIFY):  %LOCAL  I
SYMBOLGEN:  Macro variable TEXT resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TARGET resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(VERIFY):  %IF condition %length(&text)=0 OR %length(&target)=0 is FALSE
SYMBOLGEN:  Macro variable TEXT resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(VERIFY):  %DO loop beginning; index variable I; start value is 1; stop value is 1; by value is 1.  
SYMBOLGEN:  Macro variable TARGET resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable TEXT resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable I resolves to 1
MLOGIC(VERIFY):  %IF condition NOT %index(&target,%qsubstr(&text,&i,1)) is FALSE
MLOGIC(VERIFY):  %DO loop index variable I is now 2; loop will not iterate again.
SYMBOLGEN:  Macro variable I resolves to 2
SYMBOLGEN:  Macro variable TEXT resolves to  
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(VERIFY):  %IF condition &i>%length(&text) is TRUE
MLOGIC(VERIFY):  Ending execution.
SYMBOLGEN:  Macro variable I resolves to 0
                                                           The SAS System

MLOGIC(LEFT):  %IF condition &i is FALSE
MLOGIC(LEFT):  Ending execution.
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable LEVEL resolves to Lev1
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MLOGIC(SASINSTALLREPORTER):  %IF condition %sysfunc(fileexist("&configloc.&slsh.&level.&slsh.Documents&slsh.Instructions*.html")) 
      is TRUE
MPRINT(SASINSTALLREPORTER):   length server $ 45 host $ 32 ports $ 20 port $ 20;
MPRINT(SASINSTALLREPORTER):   put " ";
SYMBOLGEN:  Macro variable LEVEL resolves to Lev1
MPRINT(SASINSTALLREPORTER):   put "Lev1 Instructions.html appears to have these servers configured:";
MPRINT(SASINSTALLREPORTER):   put " ";
MPRINT(SASINSTALLREPORTER):   put @1 "SERVER NAME" @48 "HOST NAME" @ 83 "PORTS";
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is PD)
SYMBOLGEN:  Macro variable LS resolves to 132
SYMBOLGEN:  Macro variable PD resolves to 20
MPRINT(SASINSTALLREPORTER):   put @1 45*"_" @48 32*"_" @83 20*"_";
MPRINT(SASINSTALLREPORTER):   servers = 0;
SYMBOLGEN:  Macro variable CONFIGLOC resolves to /opt/sasinside/SASConfig
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable LEVEL resolves to Lev1
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
SYMBOLGEN:  Macro variable SLSH resolves to /
SYMBOLGEN:  Some characters in the above value which were subject to macro quoting have been unquoted for printing.
MPRINT(SASINSTALLREPORTER):   infile "/opt/sasinside/SASConfig/Lev1/Documents/Instructions*.html" end=done;
MPRINT(SASINSTALLREPORTER):   do while(not(done));
MPRINT(SASINSTALLREPORTER):   input;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: "<h3" or _infile_ =: "<h2" then do;
MPRINT(SASINSTALLREPORTER):   server=scan(_infile_,2,'<&>');
MPRINT(SASINSTALLREPORTER):   host = " ";
MPRINT(SASINSTALLREPORTER):   ports = " ";
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   if _infile_ =: "</table>" and server ^= " " and host ^= " " then do;
MPRINT(SASINSTALLREPORTER):   put @1 server @ 48 host @ 83 ports;
MPRINT(SASINSTALLREPORTER):   if index(server,"Process Manager") then call symput('PM',server);
MPRINT(SASINSTALLREPORTER):   if index(server,"Grid Server") then call symput('LSF',server);
MPRINT(SASINSTALLREPORTER):   if index(server,"Grid Monitor") then call symput('GMS',server);
MPRINT(SASINSTALLREPORTER):   server = " ";
MPRINT(SASINSTALLREPORTER):   host = " ";
MPRINT(SASINSTALLREPORTER):   ports = " ";
MPRINT(SASINSTALLREPORTER):   servers = 1;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   if index(_infile_,">Host machine") then do until(index(_infile_,'"detailContent">'));
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'"detailContent">') = 0 then input;
MPRINT(SASINSTALLREPORTER):   dc = index(_infile_,'"detailContent">');
MPRINT(SASINSTALLREPORTER):   if dc then host = scan(substr(_infile_,dc+16),1,'<&>');
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   if index(lowcase(_infile_),"port</td>") or index(lowcase(_infile_),"ports</td>") then do 
until(index(_infile_,'"detailContent">'));
MPRINT(SASINSTALLREPORTER):   if index(_infile_,'"detailContent">') = 0 then input;
MPRINT(SASINSTALLREPORTER):   dc = index(_infile_,'"detailContent">');
                                                           The SAS System

MPRINT(SASINSTALLREPORTER):   if dc then do;
MPRINT(SASINSTALLREPORTER):   port = scan(substr(_infile_,dc+16),1,'<&>');
MPRINT(SASINSTALLREPORTER):   if ports = " " then ports = port;
MPRINT(SASINSTALLREPORTER):   else ports = trim(ports)||" "||port;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   end;
MPRINT(SASINSTALLREPORTER):   done = 0;
MPRINT(SASINSTALLREPORTER):   if servers = 0 then put "(No configured servers found and cannot check backup files)";
SYMBOLGEN:  Macro variable LEVELS resolves to 
MLOGIC(SASINSTALLREPORTER):  %DO %WHILE() condition is FALSE; loop will not iterate again.
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is NUM)
SYMBOLGEN:  Macro variable NUM resolves to 1
MLOGIC(SASINSTALLREPORTER):  %LET (variable name is TEST)
SYMBOLGEN:  Macro variable NUM resolves to 2
SYMBOLGEN:  Macro variable TEST resolves to Configuration002
MLOGIC(SASINSTALLREPORTER):  %DO %WHILE() condition is FALSE; loop will not iterate again.
MPRINT(SASINSTALLREPORTER):   stop;
MPRINT(SASINSTALLREPORTER):   run;

NOTE: The infile "/opt/sasinside/SASConfig/Lev1/Documents/Instructions*.html" is:
      Filename=/opt/sasinside/SASConfig/Lev1/Documents/Instructions.html,
      Owner Name=sas,Group Name=sas,
      Access Permission=-rw-r--r--,
      Last Modified=24Aug2020:13:13:15,
      File Size (bytes)=30728

NOTE: 8 lines were written to file PRINT.
NOTE: 4514 records were read from the infile "/opt/sasinside/SASConfig/Lev1/Documents/Instructions*.html".
      The minimum record length was 0.
      The maximum record length was 527.
NOTE: The DATA step printed page 25.

SYMBOLGEN:  Macro variable CONFIGURATION001 resolves to /opt/sasinside/SASConfig
MLOGIC(SASINSTALLREPORTER):  %IF condition "&Configuration001 " ^= " " and         %sysfunc(getoption(METAUSER)) ^=  and         
      %sysfunc(getoption(METAPASS)) ^=  and         %sysfunc(getoption(METASERVER)) ^=  and         
      %sysfunc(getoption(METAPORT)) ^=  and         %sysfunc(getoption(METAPROTOCOL)) ^=  and         
      %sysfunc(getoption(METAREPOSITORY)) ^=  is FALSE
SYMBOLGEN:  Macro variable PM resolves to 
SYMBOLGEN:  Macro variable LSF resolves to 
SYMBOLGEN:  Macro variable GMS resolves to 
MLOGIC(SASINSTALLREPORTER):  %IF condition "&PM.&LSF.&GMS " ^= " " is FALSE
MPRINT(SASINSTALLREPORTER):   ************************************************************************************;
MPRINT(SASINSTALLREPORTER):   * The following code runs only on Windows and IF the XCMD system option is on. It *;
MPRINT(SASINSTALLREPORTER):   * first determines what, if any SAS-defined Windows Services there are, then which *;
MPRINT(SASINSTALLREPORTER):   * ones are running and what, if any, ports they use. *;
MPRINT(SASINSTALLREPORTER):   * *;
MPRINT(SASINSTALLREPORTER):   * 1/16/12 -- first reg query command hangs when run via non-admin account. Fixed *;
MPRINT(SASINSTALLREPORTER):   * by redirecting stderr to null file. Also added logic to bypass entire following *;
MPRINT(SASINSTALLREPORTER):   * block of code if no SAS Windows services discovered. *;
MPRINT(SASINSTALLREPORTER):   * *;
MPRINT(SASINSTALLREPORTER):   * Also, the code attempts to detect other installed versions of SAS, and if found, *;
MPRINT(SASINSTALLREPORTER):   * reports on the other installed versions products and such. *;
MPRINT(SASINSTALLREPORTER):   ************************************************************************************;
SYMBOLGEN:  Macro variable SYSSCP resolves to LIN X64
SYMBOLGEN:  Macro variable XCMD resolves to XCMD
MLOGIC(SASINSTALLREPORTER):  %IF condition &SYSSCP eq WIN and &XCMD = XCMD is FALSE
MLOGIC(SASINSTALLREPORTER):  Ending execution.
                                                           The SAS System

1464       ods pdf close;
NOTE: ODS PDF printed 30 pages to /tmp/discovery_ms/Discovery_teste.pdf.
ERROR: Errors printed on pages 1,8,11.

NOTE: SAS Institute Inc., SAS Campus Drive, Cary, NC USA 27513-2414
